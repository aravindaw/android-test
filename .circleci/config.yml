# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
    
#references:
  # Google Services
  # run: echo 'export GOOGLE_SERVICES_KEY="$GOOGLE_SERVICES_KEY"' >> $BASH_ENV
  # run: echo $GOOGLE_SERVICES_KEY | base64 -di > app/google-services.json

  # Google Cloud Service
  # run: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
  # run: echo $GCLOUD_SERVICE_KEY | base64 -di > app/build/client-secret.json
      
      
jobs:
  build:
    docker:
      # specify the version you desire here
      #- image: circleci/openjdk:8-jdk
      - image: circleci/android:api-25-alpha
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-{{ checksum "app/build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      #- run: sudo chmod +x ./gradle
      - run: sudo chmod +x ./gradlew
      #- run: gradle dependencies
      - run: ./gradlew androidDependencies    
      - run: ./gradlew assembleRelease
        
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
        
      # run tests!
      - run: ./gradlew test
      
      #create apk
      - run: ./gradlew -PciBuild=true :app:assembleDebug :app:assembleAndroidTest
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/
      
      #deploy and test
      - run: gcloud config set project android-test-91a52
      - run: gcloud auth activate-service-account firebase-adminsdk-tdp7k@android-test-91a52.iam.gserviceaccount.com --key-file app/android-test-91a52-firebase-adminsdk-tdp7k-6a47676a0c.json
      #- run: gcloud firebase test android run --type instrumentation --app app/build/outputs/apk/debug/mobile-debug.apk --device model=sailfish,version=26,locale=en_US,orientation=portrait --environment-variables coverage=true,coverageFile=/sdcard/tmp/code-coverage/connected/coverage.ec --directories-to-pull=/sdcard/tmp --timeout 20m
      - run: gcloud firebase test android run --type instrumentation --app app/build/outputs/apk/debug/app-debug.apk.apk --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk --device model=sailfish,version=26,locale=en_US,orientation=portrait --environment-variables coverage=true,coverageFile=/sdcard/tmp/code-coverage/connected/coverage.ec --directories-to-pull=/sdcard/tmp --timeout 20m
      - run: mkdir firebase
      - run: gsutil -m cp -r -U "`gsutil ls gs://test-lab-3udbiqpdyp0d0-miwcp7d69v80m | tail -1`*" /root/workspace/firebase/
      - store_artifacts:
          path: firebase/
          destination: /firebase/
